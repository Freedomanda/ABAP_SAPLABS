data(server) TYPE REF TO IF_HTTP_SERVER.

METHOD if_http_extension~handle_request.

  DATA: lv_xcontent     TYPE xstring,
        lv_content      TYPE string,
        lv_da_key       TYPE /bobf/conf_key,
        lt_key          TYPE /bobf/t_frw_key,
        lv_client       TYPE sy-mandt,
        ls_msg          TYPE cuan_digacc_msgs,
        lv_status       TYPE cuan_digital_account_status,
        lv_current_time TYPE timestamp,
        lt_digacc_info  TYPE TABLE OF cuanc_da_type.

  DATA:lv_code    TYPE i,
       lv_body    TYPE string,
       lv_reason  TYPE string,
       lv_success TYPE boolean.

  DATA:lt_da_root TYPE STANDARD TABLE OF cuand_da_root,
       ls_da_root TYPE cuand_da_root.

  DATA:lv_comm_medium TYPE cuan_ce_comm_medium,
       l_key          TYPE    /bobf/t_frw_key,
       lo_da_validate TYPE REF TO if_cuan_digital_account_valida,
       lv_class       TYPE string.

  CLEAR: lv_da_key, lv_xcontent, lv_content.

* Only make check for cloud deployment
  IF cl_cuan_tc_tools=>is_s4hana_cloud_deployment( ) = abap_true..
*  check user auth for cloud
    AUTHORITY-CHECK OBJECT 'HPA_OBJECT'
                        ID 'ACTVT' FIELD '03'
                        ID 'HPA_OBJ' FIELD 'CUAN_DIGITAL_ACCOUNT'.
    IF sy-subrc <> 0.
      server->response->set_status( code   = if_cuan_digital_account_valida=>sc_response_code-error
                                    reason = if_cuan_digital_account_valida=>sc_response_body-unauthorised ). "#EC NOTEXT
      server->response->append_cdata( data = if_cuan_digital_account_valida=>sc_response_body-unauthorised ).
      RETURN.
    ENDIF.
  ENDIF.


  DATA(lv_path_info) = server->request->get_header_field( EXPORTING name = if_http_header_fields_sap=>path_info ).

  server->response->set_header_field( name = 'Access-Control-Allow-Origin' value = '*').
  server->response->set_header_field( name = 'Access-Control-Allow-Headers' value = 'Origin, X-Requested-With, Content-Type, Accept').

  lv_client = server->request->get_header_field( name = 'sap-client' ).

*  1. parse client and digital account db_key
  SHIFT lv_path_info BY 1 PLACES LEFT.     "remove first /
  lv_da_key = lv_path_info.

*  2. fetch digital account type
  IF mo_ntwrk_util IS INITIAL.
    CREATE OBJECT mo_ntwrk_util.
  ENDIF.

  CALL METHOD mo_ntwrk_util->get_digacc_root
    EXPORTING
      iv_da_key      = lv_da_key
      iv_client      = lv_client
    IMPORTING
      gs_digacc_root = ls_da_root.

  IF ls_da_root IS INITIAL.
    lv_code = if_cuan_digital_account_valida=>sc_response_code-error.
    lv_body = if_cuan_digital_account_valida=>sc_response_body-invalid."'invalid digital account'.
    lv_reason = if_cuan_digital_account_valida=>sc_response_reason-invalid."'invalid digital account'.
  ELSE.
    IF ls_da_root-status = if_cuan_digital_account_valida=>gc_digacc_status_inactive.
      server->response->set_status( code   = if_cuan_digital_account_valida=>sc_response_code-error
                                    reason = if_cuan_digital_account_valida=>sc_response_body-inactive ). "#EC NOTEXT
      server->response->append_cdata( data = if_cuan_digital_account_valida=>sc_response_body-inactive ).
      RETURN.
    ENDIF.
  ENDIF.

* 3. verify the incoming message according to different da type
  SELECT SINGLE comm_medium FROM cuanc_da_type CLIENT SPECIFIED INTO lv_comm_medium WHERE mandt = ls_da_root-mandt
                                                                                      AND da_type_id = ls_da_root-digacc_type.
  IF sy-subrc = 0.
    IF lv_comm_medium  = if_cuan_digital_account_valida=>sc_comm_medium-line.
      lv_class = if_cuan_digital_account_valida=>sc_impl_class-line."'CL_CUAN_LINE_VALIDATE'.
    ELSEIF lv_comm_medium  = if_cuan_digital_account_valida=>sc_comm_medium-wec.
      lv_class = if_cuan_digital_account_valida=>sc_impl_class-wec."'CL_CUAN_WECHAT_VALIDATE'.
    ENDIF.

    IF mo_da_validate IS INITIAL.
      CREATE OBJECT mo_da_validate TYPE (lv_class).
    ENDIF.
    CALL METHOD mo_da_validate->validate_inbound_request
      EXPORTING
        is_da_root = ls_da_root
        io_server  = server
      IMPORTING
        ev_reason  = lv_reason
        ev_code    = lv_code
        ev_body    = lv_body
        ev_success = lv_success.

    IF lv_success = abap_true.

      IF server->request->get_header_field( name = if_http_header_fields_sap=>request_method ) <> if_http_request=>co_request_method_get.
* 4. fetch incoming parameters, store the data to db
        CALL METHOD server->request->get_data
          EXPORTING
            vscan_scan_always = if_http_entity=>co_content_check_profile
          RECEIVING
            data              = lv_xcontent.
        lv_content = server->request->get_cdata( ).

        ls_msg-db_key = /bobf/cl_frw_factory=>get_new_key( ).
        ls_msg-mandt = ls_da_root-mandt.
        ls_msg-da_key = lv_da_key.
        ls_msg-xcontent = lv_xcontent.
        ls_msg-content = lv_content.

        CONVERT DATE sy-datum TIME sy-uzeit INTO TIME STAMP lv_current_time TIME ZONE 'UTC'.
        ls_msg-create_time = lv_current_time.
        ls_msg-da_type = ls_da_root-digacc_type.
        MODIFY cuan_digacc_msgs CLIENT SPECIFIED FROM ls_msg .

* 5. set reponse
        IF sy-subrc = 0.
          lv_code = if_cuan_digital_account_valida=>sc_response_code-ok.
          lv_reason = if_cuan_digital_account_valida=>sc_response_reason-success.
          lv_body = if_cuan_digital_account_valida=>sc_response_body-success.
        ENDIF.
      ELSE.
        lv_code = if_cuan_digital_account_valida=>sc_response_code-ok.
        lv_reason = if_cuan_digital_account_valida=>sc_response_reason-success.
      ENDIF.
    ELSE.
      lv_code = if_cuan_digital_account_valida=>sc_response_code-error.
      lv_reason = if_cuan_digital_account_valida=>sc_response_reason-invalid_request.
    ENDIF.
  ELSE.
    lv_code = if_cuan_digital_account_valida=>sc_response_code-error.
    lv_reason = if_cuan_digital_account_valida=>sc_response_reason-invalid.
    lv_body = if_cuan_digital_account_valida=>sc_response_body-invalid.
  ENDIF.
  server->response->set_status( code = lv_code  reason = lv_reason ). "#EC NOTEXT
  server->response->append_cdata(  data = escape( val = lv_body format = cl_abap_format=>e_xss_ml ) ).
ENDMETHOD.

  METHOD check_wechat_signature.

    DATA: lt_check_table TYPE tt_check_table,
          ls_check_table TYPE ty_check_table,
          lr_check_table TYPE REF TO ty_check_table,
          ls_url         TYPE string,
          lv_sha1        TYPE string,
          lo_digacc      TYPE REF TO cl_cuan_digacc_prov,
          lv_token       TYPE string,
          ls_key         TYPE /iwbep/s_mgw_tech_pair,
          lt_key         TYPE /iwbep/t_mgw_tech_pairs,
          lt_split       TYPE TABLE OF string,
          lv_ident       TYPE rsectab-ident,
          lo_digacc_prov TYPE REF TO cl_cuan_digacc_prov,
          lv_secstr      TYPE cuan_da_token,
          ls_da          TYPE cuan_s_da_root,
          lv_da          TYPE string.


    CREATE OBJECT lo_digacc_prov.
    TRY .
        CALL METHOD cl_cuan_digacc_prov=>sec_read_api
          EXPORTING
            iv_id     = iv_secstore_id    " GUID in 'CHAR' Format in Uppercase
            iv_client = iv_client   " Client
            iv_dir    = cl_cuan_digacc_prov=>gc_prefix_subin
          IMPORTING
            ev_data   = lv_da.    " SECSTORE: Data
      CATCH cx_cuan_digital_account.
        ev_success = abap_false.
        RETURN.
    ENDTRY.

    SPLIT lv_da AT ';' INTO DATA(lv_da_1) lv_token.

* append token, timestamp signature to table.
    CLEAR: ls_check_table, lt_check_table.
    ls_check_table-value = lv_token.
    APPEND ls_check_table TO lt_check_table.
    CLEAR: ls_check_table.
    ls_check_table-value = iv_timestamp.
    APPEND ls_check_table TO lt_check_table.
    CLEAR: ls_check_table.
    ls_check_table-value = iv_nonce.
    APPEND ls_check_table TO lt_check_table.


*  build URL which will be used to generate key later
    SORT lt_check_table ASCENDING.
    CLEAR: ls_url, lv_sha1.

    LOOP AT lt_check_table REFERENCE INTO lr_check_table.
      CONCATENATE ls_url lr_check_table->value INTO ls_url.
    ENDLOOP.

* calculate by sha1 to char
    CALL FUNCTION 'CALCULATE_HASH_FOR_CHAR'
      EXPORTING
        alg            = 'SHA1'
        data           = ls_url
*       LENGTH         = 0
      IMPORTING
*       HASH           =
*       HASHLEN        =
*       HASHX          =
*       HASHXLEN       =
        hashstring     = lv_sha1
*       HASHXSTRING    =
*       HASHB64STRING  =
      EXCEPTIONS
        unknown_alg    = 1
        param_error    = 2
        internal_error = 3
        OTHERS         = 4.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

* translate to lower case
    CLEAR: ev_success.
    TRANSLATE lv_sha1 TO LOWER CASE.
    IF lv_sha1 = iv_signature.
      ev_success = abap_true.
    ENDIF.

  ENDMETHOD.